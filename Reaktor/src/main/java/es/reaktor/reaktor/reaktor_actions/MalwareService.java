package es.reaktor.reaktor.reaktor_actions;

import es.reaktor.models.Id.MotherboardMalwareId;
import es.reaktor.models.Malware;
import es.reaktor.models.Motherboard;
import es.reaktor.models.MotherboardMalware;
import es.reaktor.reaktor.repository.IMalwareRepository;
import es.reaktor.reaktor.repository.IMotherboardMalwareRepository;
import es.reaktor.reaktor.repository.IMotherboardRepository;
import es.reaktor.reaktorclient.ReaktorClientApplication;
import es.reaktor.reaktorclient.utils.exceptions.ReaktorClientException;
import org.apache.http.HttpException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.HttpResponseException;
import org.apache.http.protocol.HTTP;
import org.aspectj.apache.bcel.classfile.CodeException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MalwareService
{

    @Autowired
    private IMalwareRepository iMalwareRepository;

    @Autowired
    private IMotherboardMalwareRepository iMotherboardMalwareRepository;

    @Autowired
    private IMotherboardRepository iMotherboardRepository;



    public void deleteMalware(String idMalware)
    {
        Malware malwareRemove = this.iMalwareRepository.findById(idMalware).orElseThrow(
                () -> new IllegalArgumentException("Invalid malware Id:" + idMalware)
        );

        List<String> motherboardMalwareIdList = this.iMotherboardMalwareRepository.findIdMotherboardOfMalware(idMalware);

        for (String id : motherboardMalwareIdList)
        {
            Motherboard motherboard = this.iMotherboardRepository.findBySerialNumber(id);
            motherboard.getMalware().remove(new MotherboardMalware(new MotherboardMalwareId(idMalware, id), malwareRemove, motherboard));
        }

        this.iMalwareRepository.delete(malwareRemove);
    }

}
