package es.reaktor.reaktorclient.scheduled_task;

import es.reaktor.reaktorclient.models.Reaktor;
import es.reaktor.reaktorclient.utils.BeepSound;
import jakarta.annotation.PostConstruct;
import lombok.Data;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import es.reaktor.models.Malware;
import es.reaktor.reaktorclient.utils.CommandExecutor;
import es.reaktor.reaktorclient.utils.HttpCommunicationSender;
import es.reaktor.reaktorclient.utils.MessageSender;
import es.reaktor.reaktorclient.utils.exceptions.ConstantsErrors;
import es.reaktor.reaktorclient.utils.exceptions.ReaktorClientException;
import es.reaktor.reaktorclient.windows.WindowsMalware;

import java.util.Comparator;
import java.util.List;

@Component
@Data
public class SearchMalware
{

    /**
     * - Logger -
     * This logger is used to log the information of the application
     */
    private static final Logger LOGGER = LogManager.getLogger();

    @Autowired
    private HttpCommunicationSender httpCommunicationSender;

    @Autowired
    private CommandExecutor commandExecutor;

    @Autowired
    private Reaktor reaktor;

    @Autowired
    private WindowsMalware windowsMalware;

    @Autowired
    private BeepSound beepSound;

    private MessageSender messageSender;

    private List<Malware> cloneList;

    private boolean reported = true;

    @Value("${reaktor.server.url}")
    private String reaktorServerUrl;

    @PostConstruct
    public void init()
    {
        this.messageSender = new MessageSender(this.commandExecutor, "Estas siendo monitorizado por el sistema del I.E.S Jandula, cierra los siguientes programas, se tomarán medidas si no lo haces ");
    }

    @Scheduled(fixedRate = 1_000)
    public void searchMalware()
    {
        List<Malware> malwareListInThisPc = this.windowsMalware.getMalwareListInThisPc();

        try
        {
            if (!malwareListInThisPc.isEmpty())
            {
                LOGGER.info(this.httpCommunicationSender.sendPost(this.httpCommunicationSender.createHttpPostMalwareList(this.reaktorServerUrl + "/report-malware", this.reaktor.getMotherboard().getSerialNumber(), malwareListInThisPc)));

                if (!this.equalsListMalware(this.cloneList, malwareListInThisPc))
                {
                    this.cloneList = malwareListInThisPc;
                    this.messageSender.setMalware(this.nombresMalware(malwareListInThisPc));
                    this.messageSender.start();
                    this.messageSender = new MessageSender(this.commandExecutor, "Estas siendo monitorizado por el sistema del I.E.S Jandula, cierra los siguientes programas, se tomarán medidas si no lo haces ");
                    this.beepSound.run();
                }

                this.reported = true;

            } else if (this.reported)
            {
                LOGGER.info(this.httpCommunicationSender.sendPost(this.httpCommunicationSender.createHttpPostMalwareList(this.reaktorServerUrl + "/report-malware", this.reaktor.getMotherboard().getSerialNumber(), malwareListInThisPc)));
                this.reported = false;
            }
        }
        catch (ReaktorClientException reaktorClientException)
        {
            LOGGER.warn(reaktorClientException.getMessage());
            LOGGER.warn(ConstantsErrors.ERROR_COMMUNICATION_TO_SERVER, reaktorClientException);
            reaktorClientException.printStackTrace();
        }
    }

    private boolean equalsListMalware(List<Malware> cloneList, List<Malware> malwareListInThisPc)
    {

        if (cloneList == null || malwareListInThisPc == null)
        {
            return false;
        }

        if (cloneList.size() != malwareListInThisPc.size())
        {
            return false;
        }

        if (cloneList.isEmpty() && malwareListInThisPc.isEmpty())
        {
            return true;
        }

        cloneList.sort(Comparator.comparing(Malware::getName));
        malwareListInThisPc.sort(Comparator.comparing(Malware::getName));

        for (int i = 0; i < cloneList.size(); i++)
        {
            if (!malwareListInThisPc.get(i).getName().equals(cloneList.get(i).getName()))
            {
                return false;
            }
        }

        return true;
    }

    private String nombresMalware(List<Malware> malwareListInThisPc)
    {
        StringBuilder nombresMalware = new StringBuilder();

        for (Malware malware : malwareListInThisPc)
        {
            nombresMalware.append(malware.getName()).append(", ");
        }

        return nombresMalware.toString();
    }
}